{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nIiISmAIIERERCUwBhIiIiASmAEJEREQCUwAhIiIigSmAEBERkcAUQIiIiEhgCiBEREQkMAUQIiIi\nEpgCCBEREQlMAYSIiIgEpgBCREREAlMAISIiIoEpgBAREZHAFECIiIhIYAogREREJDAFECIiIhKY\nAggREREJTAGEiIiIBKYAQkRERAJTACEiIiKBKYAQERGRwBRAiIiISGAKIERERCQwBRAiIiISmAII\nERERCUwBhIiIiASmAEJEREQCUwAhIiIigSmAEBERkcAUQIiIiEhgCiBEREQkMAUQIiIiEpgCCBER\nEQlMAYSIiIgEpgBCREREAlMAISIiIoEpgBAREZHAFECIiIhIYAogREREJDAFECIiIhKYAggREREJ\nTAGEiIiIBKYAQkRERAJTACEiIiKBKYAQERGRwBRAiIiISGAKIERERCQwBRAiIiISmAIIERERCUwB\nhIiIiASmAEJEREQCUwAhIiIigSmAEBERkcAUQIiIiEhgCiBEREQkMAUQIiIiEpgCCBEREQlMAYSI\niIgEpgBCREREAlMAISIiIoEpgBAREZHAFEBIztXW1uZ6CNKL9H4OPnpPJZk+CyCMMTcaY35njHnL\nGBNJcc44Y8xa75x9xpjvG2MU1Awx+sdpcNH7OfjoPZVk+vJmPQx4CPhxsge9QGEdcAwwC/gM8Fng\nW304JhEREekFfRZAWGu/aa39IfBiilMqgA8Cn7LWvmitrQduApYaY47pq3GJiIhIz+VyuWAW8KK1\n9vWYY/XASOCs3AxJREREspHLT/pjgdcSjr0W89jzKZ53PMBLL73UR8OS/nbo0CGamppyPQzpJXo/\nBx+9p4NHzL3z+J5eK1AAYYz5LvC1NKdYYLK1NtyjUbnrpHIGwOLFi3v4EpJPpk6dmushSC/S+zn4\n6D0ddM4AnuzJBYLOQNwB/DzDOTuzvNY+YHrCsZO9r4kzE7HqgU8Bu4EjWb6WiIiIuJmHM3D30h4J\nFEBYa9uAtp6+qGcbcKMxZkxMHsTFwCHgfzKM4de9NAYREZGhpkczD74+y4EwxowDRgOnAyFjzNne\nQy3W2reADbhA4VfGmK8BpwC3Aquste/11bhERESk54y16dINenBhY34OfDrJQxdaazd754zD1Ym4\nAHgL+HfgBmttR58MSkRERHpFnwUQIiIiMnipbLSIiIgEpgBCREREAhtQAYQadA1uxpjdxpiOmD/t\nxpiv5npckj1jzFJjzC5jzGFjzHZjTOJWbRkAjDE3J/wudhhjUu6Ok/xjjJlrjFljjHnFe/8uTXLO\nt4wxfzHGvG2M2WiMmRjkNQbajVUNugY3C3wDVw9kLG5nzj05HZFkzRhzJfAD4GbgHFw12XpjzJic\nDky66/dEfxfHAnNyOxwJaATwHLCUJMUZvd2Py4BrgRm4jQz1xphjs32BAZlEaYz5DHCXtXZ0wvGF\nwBrgFL+2hDHmWuB7wPuttUf7fbCSNWPMLtz7ujLXY5HgjDHbgaestdd53xtgL7DSWvv9nA5OAjHG\n3Ax8wlpbluuxSM8ZYzqAv7fWrok59hfgdmvtXd73J+GKOH7GWvtQNtcdaDMQmahB18D3r8aY140x\nTcaYLxtjQrkekGRmjBkGTAUe9Y9Z9+mkAZidq3FJj5R409+txpgab9u9DALGmAm4WaXY39c3gKcI\n8Ps62Npmd7dBl+SHHwJNQAQ4FzdzNBb4ci4HJVkZA4RI/vs3qf+HIz20Hbf8+yfcUuItwGZjzIe9\nQoAysI3FLWsk+30dm+1Fcj4DYYz5bpJkncREutJeeKmBt1YzCAR5f621d1trN1trf2+t/QnwL8By\n79OtDEwG/e4NONbaemvtI97v4kagCigErsjx0KRvBfp9zYcZiHxo0CV9pyfv71O4/0fPAJp7cUzS\n+14H2on+vvk+gH73Bjxr7SFjTBgIlKUveWsfLlg4mfjfzw8Az2Z7kZwHEPnQoEv6Tg/f33OADuCv\nvTci6QvW2veMMY3ARbhEZj+J8iJASbEDnDHmfUAx8Mtcj0V6zlq7yxizD/f7+QJ0JlHOBH6U7XVy\nHkAEoQZdg5cxZhbuf97HgDdxORB3Ar+y1h7K5dgka3cCv/ACiaeB64ETcD1uZAAxxtwO/Bb4M3Aq\n8E3gKFCby3FJ9owxI3AzRsY7dKZ3z4xYa/cCdwPfMMa0ALtx98qXgf/K+jUG0jZONegavIwx5wD3\n4hLujgN24T7t3KXgb+AwxnwJ+CpuavQ5YLm19pncjkqCMsbUAnOBImA/sBX4urV2V04HJlkzxszD\nfSBLvMn/wlp7lXfOLcA1wChgC7DUWtuS9WsMpABCRERE8kPOd2GIiIjIwKMAQkRERAJTACEiIiKB\nKYAQERGRwBRAiIiISGAKIERERCQwBRAiIiISmAIIERERCUwBhIiIiASmAEJEREQCUwAhIiIigf1/\njunIPHqw01gAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x9293890>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean_01 = np.array([1, 3])\n",
    "mean_02 = np.array([-1, 1])\n",
    "\n",
    "cov_01 = np.array([[1, -0.9], [-0.9, 1.0]])\n",
    "cov_02 = np.array([[1, 0.], [0., 1.0]])\n",
    "\n",
    "dt1 = np.random.multivariate_normal(mean_01, cov_01, 300)\n",
    "dt2 = np.random.multivariate_normal(mean_02, cov_02, 300)\n",
    "\n",
    "plt.figure(0)\n",
    "plt.xlim(-10, 10)\n",
    "plt.ylim(-10, 10)\n",
    "\n",
    "plt.scatter(dt1[:, 0], dt1[:, 1])\n",
    "plt.scatter(dt2[:, 0], dt2[:, 1], color='green')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(300, 2) (300, 2)\n",
      "[-0.02844679  1.99891953]\n",
      "[[ 0.22163303  3.93298485]\n",
      " [ 1.77365017  2.10448904]\n",
      " [-0.64820019  4.87785111]\n",
      " [ 0.32360463  4.10362241]\n",
      " [ 1.76660968  2.90665646]]\n"
     ]
    }
   ],
   "source": [
    "print dt1.shape, dt2.shape\n",
    "data = np.zeros((600, 2))\n",
    "data[:300, :] = dt1\n",
    "data[300:, :] = dt2\n",
    "\n",
    "labels = np.zeros((600, 1))\n",
    "labels[300:] = 1\n",
    "\n",
    "print data.mean(axis=0)\n",
    "print data[:5, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(600, 2)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAMVYd0hL6XrLAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11bf35f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.00166945  0.25917019]\n",
      " [ 0.25917019  1.00166945]]\n"
     ]
    }
   ],
   "source": [
    "data_std=(data - data.mean(axis=0))/(data.std(axis=0))\n",
    "print data_std.shape\n",
    "\n",
    "plt.figure(0)\n",
    "plt.xlim(-10, 10)\n",
    "plt.ylim(-10, 10)\n",
    "plt.scatter(data_std[:, 0], data_std[:, 1])\n",
    "plt.show()\n",
    "\n",
    "print np.cov(data_std.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(600, 1)\n",
      "[ -4.82669460e-16   1.27051147e-15]\n",
      "[ 0.  1.  1.  0.  0.  0.  0.  1.  1.  0.]\n"
     ]
    }
   ],
   "source": [
    "print labels.shape\n",
    "print data_std.mean(axis=0)\n",
    "\n",
    "all_data = np.zeros((600, 3))\n",
    "all_data[:, :2] = data_std\n",
    "all_data[:, -1] = labels.flatten()\n",
    "\n",
    "np.random.shuffle(all_data)\n",
    "print all_data[:10, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "480 (600, 3)\n",
      "X training:  (480, 2)\n",
      "X testing:  (120, 2)\n"
     ]
    }
   ],
   "source": [
    "split = int(0.8 * all_data.shape[0])\n",
    "print split, all_data.shape\n",
    "\n",
    "X_train = all_data[:split, :2]\n",
    "X_test = all_data[split:, :2]\n",
    "\n",
    "y_train = all_data[:split, -1]\n",
    "y_test = all_data[split:, -1]\n",
    "\n",
    "print 'X training: ', X_train.shape\n",
    "print 'X testing: ', X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.41421356237\n"
     ]
    }
   ],
   "source": [
    "def dist(x1, x2):\n",
    "    # Eucledian distance\n",
    "    # x1 and x2 are two vector points\n",
    "    # ex: x1 = [1.0, -0.3]\n",
    "    diff = (x1 - x2)\n",
    "    diff_sq = diff**2\n",
    "    sum_diff = diff_sq.sum()\n",
    "    return np.sqrt(sum_diff)\n",
    "\n",
    "pt1 = np.array([1.0, 1.0])\n",
    "pt2 = np.array([0.0, 0.0])\n",
    "print dist(pt1, pt2) # output sqrt(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def knn(X_train, xt, y_train, k=5):\n",
    "    n_rows = X_train.shape[0]\n",
    "    dist_labels = []\n",
    "    for px in range(n_rows):\n",
    "        pt_dist = dist(X_train[px], xt)\n",
    "        dist_labels.append([pt_dist, y_train[px]])\n",
    "    dist_labels = sorted(dist_labels)\n",
    "    neighbours = np.asarray(dist_labels[:k])[:, -1]\n",
    "    labs = np.unique(neighbours, return_counts=True)\n",
    "    return 1.0\n",
    "    #return labs[0][labs[1].argmax()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "120\n",
      "[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n",
      "[ 1.  1.  1.  0.  1.  1.  0.  0.  0.  0.]\n",
      "48.3333333333%\n"
     ]
    }
   ],
   "source": [
    "preds = []\n",
    "\n",
    "for tx in range(X_test.shape[0]):\n",
    "    preds.append(knn(X_train, X_test[tx], y_train, k=2))\n",
    "\n",
    "preds = np.asarray(preds)\n",
    "print len(preds)\n",
    "print preds[:10]\n",
    "print y_test[:10]\n",
    "counter = 0\n",
    "\n",
    "for px in range(preds.shape[0]):\n",
    "    if preds[px] == y_test[px]:\n",
    "        counter += 1\n",
    "\n",
    "print str(float(counter)*100/y_test.shape[0]) + \"%\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
